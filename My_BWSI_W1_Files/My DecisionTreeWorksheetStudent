{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of DecisionTreeWorksheetStudent","version":"0.3.2","views":{},"default_view":{},"provenance":[{"file_id":"https://github.com/cjin2019/Week1_public/blob/master/Decision%20Tree/DecisionTreeWorksheetStudent.ipynb","timestamp":1531401256698},{"file_id":"165CSmT99w4_Sv1UENIyvIkH7ZEw2Xeh8","timestamp":1527780043079}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"-UimMCmGe19F","colab_type":"text"},"cell_type":"markdown","source":["# Decision Tree Worksheet\n"]},{"metadata":{"id":"kedW02LgKjVL","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":17},"outputId":"bb746a45-8f5c-4e2e-f09b-e9a0a0a204ea","executionInfo":{"status":"ok","timestamp":1531404730445,"user_tz":240,"elapsed":2541,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn import tree\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn import metrics\n","!pip install -q graphviz\n","import graphviz\n","import matplotlib.pyplot as plt"],"execution_count":95,"outputs":[]},{"metadata":{"id":"rz35eT5-SMht","colab_type":"text"},"cell_type":"markdown","source":["#### Load pima indians diabetes dataset below"]},{"metadata":{"id":"Ydh9gmDkMGmu","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":198},"outputId":"cff2b233-a6dc-4a23-9c17-4ebf6d231c7b","executionInfo":{"status":"ok","timestamp":1531404732246,"user_tz":240,"elapsed":262,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["url = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\"\n","names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\n","\n","data = pd.read_csv(url, names = names)\n","data.head()"],"execution_count":96,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>preg</th>\n","      <th>plas</th>\n","      <th>pres</th>\n","      <th>skin</th>\n","      <th>test</th>\n","      <th>mass</th>\n","      <th>pedi</th>\n","      <th>age</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>148</td>\n","      <td>72</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>33.6</td>\n","      <td>0.627</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>85</td>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>0</td>\n","      <td>26.6</td>\n","      <td>0.351</td>\n","      <td>31</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>183</td>\n","      <td>64</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>23.3</td>\n","      <td>0.672</td>\n","      <td>32</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>89</td>\n","      <td>66</td>\n","      <td>23</td>\n","      <td>94</td>\n","      <td>28.1</td>\n","      <td>0.167</td>\n","      <td>21</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>137</td>\n","      <td>40</td>\n","      <td>35</td>\n","      <td>168</td>\n","      <td>43.1</td>\n","      <td>2.288</td>\n","      <td>33</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   preg  plas  pres  skin  test  mass   pedi  age  class\n","0     6   148    72    35     0  33.6  0.627   50      1\n","1     1    85    66    29     0  26.6  0.351   31      0\n","2     8   183    64     0     0  23.3  0.672   32      1\n","3     1    89    66    23    94  28.1  0.167   21      0\n","4     0   137    40    35   168  43.1  2.288   33      1"]},"metadata":{"tags":[]},"execution_count":96}]},{"metadata":{"id":"KAFhsJIsSpMR","colab_type":"text"},"cell_type":"markdown","source":["#### create training and testing dataset with sklearn function: train_test_split"]},{"metadata":{"id":"fHbA28aFS2DM","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"8ec23b56-575d-4bb0-a1e9-75a739d893cd","executionInfo":{"status":"ok","timestamp":1531406706043,"user_tz":240,"elapsed":287,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["feature_names = ['preg','plas','skin','test','mass','pedi', 'age']\n","X = data.loc[:, 'preg': 'age']\n","y = data['class']\n","\n","# split X and y into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n","len(X_train)\n","#X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.25, random_state=0)"],"execution_count":105,"outputs":[{"output_type":"execute_result","data":{"text/plain":["576"]},"metadata":{"tags":[]},"execution_count":105}]},{"metadata":{"id":"4_8DZinWTJRa","colab_type":"text"},"cell_type":"markdown","source":["#### Create a model with sklearn's DecisionTreeClassifier and predict values on your test set"]},{"metadata":{"id":"EgByCP_EhyB2","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["# instantiate model\n","from sklearn.model_selection import GridSearchCV\n","\n","\"\"\"param_grid = {'max_depth': np.arange(3, 10), 'criterion': ['gini', 'entropy']}\n","gCV = GridSearchCV(DecisionTreeClassifier(), param_grid)\n","gCV.fit(X_train, y_train)\"\"\"\n","\n","decision_tree = DecisionTreeClassifier(max_depth=5, criterion = 'entropy')\n","decision_tree.fit(X_train, y_train)\n","\n","y_test_pred = decision_tree.predict(X_test)\n","\n","\n","\n","#gCV.best_params_"],"execution_count":0,"outputs":[]},{"metadata":{"id":"6HNa6fxbT6ak","colab_type":"text"},"cell_type":"markdown","source":["#### Print the accuracy on the test data, play with the parameters and try to improve the accuracy\n","hint: there is an sklearn to calculate accuracy"]},{"metadata":{"id":"6Pbu-t_tiqnB","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"a17aa2fd-10f0-46af-e027-1035c0691e15","executionInfo":{"status":"ok","timestamp":1531406709466,"user_tz":240,"elapsed":258,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["acc = metrics.accuracy_score(y_test, y_test_pred)\n","\n","print(acc)"],"execution_count":107,"outputs":[{"output_type":"stream","text":["0.7447916666666666\n"],"name":"stdout"}]},{"metadata":{"id":"tKdqOMBKUvGZ","colab_type":"text"},"cell_type":"markdown","source":["#### Use graphviz to view the decision tree graph\n","##### hint: want to look at a code example, see the Classification Evaluation notebook on github"]},{"metadata":{"id":"8o55bY_jl8gj","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":981},"outputId":"d2f635a7-d7ff-4bf7-a233-d5522956ce9a","executionInfo":{"status":"ok","timestamp":1531406733446,"user_tz":240,"elapsed":324,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["# visualize the decision tree\n","dot_data = tree.export_graphviz(model, out_file=None, \n","                         feature_names=feature_names,  \n","                         class_names=['No Diabetes','Diabetes'],  \n","                         filled=True, rounded=True,\n","                         max_depth=4) \n","\n","graph = graphviz.Source(dot_data)  \n","graph "],"execution_count":108,"outputs":[{"output_type":"error","ename":"ExecutableNotFound","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/graphviz/backend.py\u001b[0m in \u001b[0;36mpipe\u001b[0;34m(engine, format, data, quiet)\u001b[0m\n\u001b[1;32m    158\u001b[0m             \u001b[0mstdout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msubprocess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPIPE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstderr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msubprocess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPIPE\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 159\u001b[0;31m             **POPEN_KWARGS)\n\u001b[0m\u001b[1;32m    160\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/subprocess.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags, restore_signals, start_new_session, pass_fds, encoding, errors)\u001b[0m\n\u001b[1;32m    708\u001b[0m                                 \u001b[0merrread\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrwrite\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 709\u001b[0;31m                                 restore_signals, start_new_session)\n\u001b[0m\u001b[1;32m    710\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/subprocess.py\u001b[0m in \u001b[0;36m_execute_child\u001b[0;34m(self, args, executable, preexec_fn, close_fds, pass_fds, cwd, env, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite, restore_signals, start_new_session)\u001b[0m\n\u001b[1;32m   1343\u001b[0m                             \u001b[0merr_msg\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m': '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mrepr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr_filename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1344\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mchild_exception_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merrno_num\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr_filename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1345\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mchild_exception_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr_msg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'dot': 'dot'","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mExecutableNotFound\u001b[0m                        Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    336\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    337\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 338\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    339\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/graphviz/files.py\u001b[0m in \u001b[0;36m_repr_svg_\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_repr_svg_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 106\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpipe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'svg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_encoding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpipe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/graphviz/files.py\u001b[0m in \u001b[0;36mpipe\u001b[0;34m(self, format)\u001b[0m\n\u001b[1;32m    123\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtext_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msource\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_encoding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m         \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpipe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mouts\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/graphviz/backend.py\u001b[0m in \u001b[0;36mpipe\u001b[0;34m(engine, format, data, quiet)\u001b[0m\n\u001b[1;32m    160\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrno\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0merrno\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mENOENT\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 162\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mExecutableNotFound\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    163\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pragma: no cover\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m             \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mExecutableNotFound\u001b[0m: failed to execute ['dot', '-Tsvg'], make sure the Graphviz executables are on your systems' PATH"]},{"output_type":"execute_result","data":{"text/plain":["<graphviz.files.Source at 0x7fd8fb3a5828>"]},"metadata":{"tags":[]},"execution_count":108}]},{"metadata":{"id":"4iz4meWDVmo2","colab_type":"text"},"cell_type":"markdown","source":["#### Use the graph above to answer the questions below"]},{"metadata":{"id":"K5b6COUwWTtT","colab_type":"text"},"cell_type":"markdown","source":["Question 1: If you add up the samples from the leaf nodes, how many samples are there?"]},{"metadata":{"id":"B17z-Gw5WUCW","colab_type":"text"},"cell_type":"markdown","source":["Your answer here <br>"]},{"metadata":{"id":"u1yM9h10WUEv","colab_type":"text"},"cell_type":"markdown","source":["Question 2: What do you think X[n] represents in the nodes from the graph? <br>"]},{"metadata":{"id":"BXHWUVxtWUGo","colab_type":"text"},"cell_type":"markdown","source":["Your answer here <br>"]},{"metadata":{"id":"rA7B0oTaWUIe","colab_type":"text"},"cell_type":"markdown","source":["Question 3: What is the root feature? Does it make sense as the root feature?"]},{"metadata":{"id":"fp1rz6bqWUKw","colab_type":"text"},"cell_type":"markdown","source":["Your answer here <br>"]},{"metadata":{"id":"1t559pS3ZHES","colab_type":"text"},"cell_type":"markdown","source":["#### If you were to change the parameters to have a max_depth of 500 and min_samples_leaf of 1, what do you think the effect would be on the test accuracy? Training accuracy?"]},{"metadata":{"id":"mX6-ukjxakVD","colab_type":"text"},"cell_type":"markdown","source":["Your answer here <br>"]},{"metadata":{"id":"7dnlqId2bIcR","colab_type":"text"},"cell_type":"markdown","source":["#### Test your guesses, create a model with max_depth=500 and min_samples_leaf=1, and predict values for the training and test data <br>\n","you only need to predict part of the training data"]},{"metadata":{"id":"hnUQKX9vl9Gy","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"6bd675ce-9d7a-46db-f76a-4502d8514f0b","executionInfo":{"status":"ok","timestamp":1531406868311,"user_tz":240,"elapsed":300,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["decision_tree = DecisionTreeClassifier(max_depth=500, min_samples_leaf = 1)\n","decision_tree.fit(X_train, y_train)\n","\n","y_test_pred = decision_tree.predict(X_test)\n","\n","accuracy_score(y_test, y_test_pred)"],"execution_count":109,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.71875"]},"metadata":{"tags":[]},"execution_count":109}]},{"metadata":{"id":"40Psyt65pD8p","colab_type":"text"},"cell_type":"markdown","source":["# Random Forest"]},{"metadata":{"id":"mjLu1MLIpGNF","colab_type":"text"},"cell_type":"markdown","source":["#### Create a model with sklearn's RandomForestClassifier and predict values on your test set"]},{"metadata":{"id":"TYwbpWxUfDIY","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"68df0109-f4b1-4031-d4ff-dc9ec03c69f7","executionInfo":{"status":"ok","timestamp":1531406987111,"user_tz":240,"elapsed":331,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["rfc = RandomForestClassifier(n_estimators = 12)\n","rfc.fit(X_train, y_train)\n","\n","y_test_pred = rfc.predict(X_test)\n","\n"],"execution_count":115,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.78125"]},"metadata":{"tags":[]},"execution_count":115}]},{"metadata":{"id":"6Ys_J3O4pd0u","colab_type":"text"},"cell_type":"markdown","source":["#### Print the accuracy on the test data, play with the parameters and try to improve the accuracy<br>\n","how did the accuracy compare to the decision tree's accuracy?<br>"]},{"metadata":{"id":"aQdfjEWdfDOH","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"7a37148e-2590-4764-8d64-2082fbe21fab","executionInfo":{"status":"ok","timestamp":1531406999376,"user_tz":240,"elapsed":263,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["accuracy_score(y_test, y_test_pred)"],"execution_count":116,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.78125"]},"metadata":{"tags":[]},"execution_count":116}]},{"metadata":{"id":"jGlSHxuUqAnX","colab_type":"text"},"cell_type":"markdown","source":["#### Print the 3 most important features<br>\n","hint: sklearn has an attribute to help you find these "]},{"metadata":{"id":"5rVekWn0qw3r","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":52},"outputId":"f18d70b3-6da2-44cb-d412-439f21ef1759","executionInfo":{"status":"ok","timestamp":1531407047363,"user_tz":240,"elapsed":275,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["importances = rfc.feature_importances"],"execution_count":118,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.07143552, 0.25580716, 0.08431818, 0.0665326 , 0.08979694,\n","       0.14603241, 0.13013369, 0.15594351])"]},"metadata":{"tags":[]},"execution_count":118}]},{"metadata":{"id":"lynu8pLDtd0S","colab_type":"text"},"cell_type":"markdown","source":["#### Find the accuracy for random forests with 1 to 100 trees, counting by 5. Plot these accuracies"]},{"metadata":{"id":"e2hG7npcuM7f","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":37},"outputId":"158960c0-4581-4010-cdd6-4f8ca63772c5","executionInfo":{"status":"ok","timestamp":1531404623146,"user_tz":240,"elapsed":266,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["#your code here"],"execution_count":92,"outputs":[]},{"metadata":{"id":"ZjaVPWZqVP6l","colab_type":"text"},"cell_type":"markdown","source":["#### Plot the roc_curve using predict_proba a function for our random forest model, and metrics. roc_curve <br>\n","It might help to google these functions and look at sklearn's documentation"]},{"metadata":{"id":"REk_yvdTfDa3","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":37},"outputId":"b5ced155-dcb6-411b-c276-fb9a0bf59e0e","executionInfo":{"status":"ok","timestamp":1531404624095,"user_tz":240,"elapsed":709,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["# your code here"],"execution_count":93,"outputs":[]},{"metadata":{"id":"YAml_sdbYqIm","colab_type":"text"},"cell_type":"markdown","source":["#### To view the trees in the random_forest you can loop through your model's '.estimators_\" attribute <br>\n","If you have time look at pictures of the trees"]},{"metadata":{"id":"k5pacJabuKXx","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":37},"outputId":"aba9aee0-4a3a-48f8-db68-def750ac8ab0","executionInfo":{"status":"ok","timestamp":1531404625276,"user_tz":240,"elapsed":262,"user":{"displayName":"Caroline J","photoUrl":"//lh5.googleusercontent.com/-UW6T_Czu5Tc/AAAAAAAAAAI/AAAAAAAAAmk/_PdmajiiHBY/s50-c-k-no/photo.jpg","userId":"115113466279912359883"}}},"cell_type":"code","source":["# your code here"],"execution_count":94,"outputs":[]}]}